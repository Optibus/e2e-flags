apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: flags-api-pdb
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app: flags-api-label
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flags-api-deployment
  labels:
    app.kubernetes.io/name: flags-api-label
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flags-api-label
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: flags-api-label
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - flags-api-label
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - flags-api-label
                topologyKey: topology.kubernetes.io/zone
      containers:
        - name: flags-api
          imagePullPolicy: Always
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "1Gi"
              cpu: "1"
          image: 008770191051.dkr.ecr.us-east-2.amazonaws.com/flags-e2e:23-09-11-01
          command: ['node']
          args: ['dist/services/server/index.js']
          env:
            - name: AWS_REGION
              value: "us-east-2"
            - name: REDIS_SERVICE_SERVICE_HOST
              value: "e2e-flags.gzkp6i.ng.0001.use2.cache.amazonaws.com"
            - name: "HOST"
              value: "0.0.0.0"
            - name: "PORT"
              value: "3000"
          ports:
          - containerPort: 3000
            protocol: TCP
      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: on-schedule
      nodeSelector:
        kops.k8s.io/instancegroup: on-schedule
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cron-fetcher-job
  labels:
    app.kubernetes.io/name: cron-fetcher-label
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: cron-fetcher
              imagePullPolicy: Always
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "1"
                limits:
                  memory: "1Gi"
                  cpu: "1"
              image: 008770191051.dkr.ecr.us-east-2.amazonaws.com/flags-e2e:23-09-11-01
              command: ['node']
              args: ['dist/services/cron/index.js']
              env:
                - name: REDIS_SERVICE_SERVICE_HOST
                  value: "e2e-flags.gzkp6i.ng.0001.use2.cache.amazonaws.com"
                - name: AWS_REGION
                  value: "us-east-2"
                - name: CRON_INTERVAL
                  value: "5"
          tolerations:
            - effect: NoSchedule
              key: dedicated
              operator: Equal
              value: on-schedule
          nodeSelector:
            kops.k8s.io/instancegroup: on-schedule
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: flags-api-internal.optibus.com
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-2:008770191051:certificate/d3f1d4be-312d-4c49-a025-35a7fefdd47b
    service.beta.kubernetes.io/load-balancer-attributes: access_logs.s3.enabled=true,access_logs.s3.bucket=optibus-access-logs-us-east-2,access_logs.s3.prefix=e2e-flags
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  finalizers:
    - service.kubernetes.io/load-balancer-cleanup
  name: flags-api-service
  namespace: e2e-flags
spec:
  allocateLoadBalancerNodePorts: true
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      port: 443
      protocol: TCP
      targetPort: 3000
  selector:
    app: flags-api-label
  sessionAffinity: None
  type: LoadBalancer